// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "669fe84c-19ce-41f9-ba64-2c844d2b851b",
                            Name = "Personal"
                        },
                        new
                        {
                            Id = "9c24c7ac-b86f-4a30-a0fd-bb3ef6e76308",
                            Name = "Job"
                        },
                        new
                        {
                            Id = "4a9861e0-7884-4d4c-9080-b48de9c883ac",
                            Name = "Family"
                        },
                        new
                        {
                            Id = "43e674b8-ae0e-48a0-a231-e1bc5cf85e9c",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = "f83e8ace-ea2c-48f0-846d-1f86c7eb127d",
                            Name = "Awaiting"
                        },
                        new
                        {
                            Id = "0a7bead2-d075-4100-b803-05498f07347b",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = "2b381501-15b1-488b-96e2-950869d68d79",
                            Name = "Finished"
                        },
                        new
                        {
                            Id = "d920dc1b-fab5-40cc-a387-81f7059da658",
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("LatName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "90b21bc9-9062-4142-b3f9-774e6797e080",
                            FirstName = "Peter",
                            LatName = "Petrov",
                            Username = "peter123"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.UserTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = "23bf9c00-056c-4c72-9fa7-396c28da66c7",
                            CategoryId = "669fe84c-19ce-41f9-ba64-2c844d2b851b",
                            Description = "Create MinimalAPI demo project.",
                            StatusId = "0a7bead2-d075-4100-b803-05498f07347b",
                            UserId = "90b21bc9-9062-4142-b3f9-774e6797e080"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.UserTask", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Status", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
